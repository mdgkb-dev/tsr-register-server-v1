package {{.Package}}

type IRepository interface {
create(*gin.Context, *models.{{.Model}}) error
getAll(*gin.Context) ([]models.{{.Model}}, error)
get(*gin.Context, string) (models.{{.Model}}, error)
updateStatus(*gin.Context, *models.{{.Model}}) error
delete(*gin.Context, string) error
update(*gin.Context, *models.{{.Model}}) error
}

type Repository struct {
db *bun.DB
}

func NewRepository(db *bun.DB) *Repository {
return &Repository{db}
}

func (r *Repository) create(ctx *gin.Context, item *models.{{.Model}}) (err error) {
_, err = r.db.NewInsert().Model(item).Exec(ctx)
return err
}

func (r *Repository) getAll(ctx *gin.Context) (items []models.{{.Model}}, err error) {
err = r.db.NewSelect().Model(&items).Scan(ctx)
return items, err
}

func (r *Repository) get(ctx *gin.Context, id string) (item models.{{.Model}}, err error) {
err = r.db.NewSelect().
Model(&item).
Relation("Timetable.TimetableDays.Weekday").
Relation("Schedule.ScheduleItems").
Where("{{.Model}}.id = ?", id).Scan(ctx)
return item, err
}

func (r *Repository) updateStatus(ctx *gin.Context, item *models.{{.Model}}) (err error) {
_, err = r.db.NewUpdate().Model(item).Exec(ctx)
return err
}

func (r *Repository) delete(ctx *gin.Context, id string) (err error) {
_, err = r.db.NewDelete().Model(&models.{{.Model}}{}).Where("id = ?", id).Exec(ctx)
return err
}

func (r *Repository) update(ctx *gin.Context, item *models.{{.Model}}) (err error) {
_, err = r.db.NewUpdate().Model(item).Where("id = ?", item.ID).Exec(ctx)
return err
}
